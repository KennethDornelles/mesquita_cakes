// ========================================
// SECRETA FORNADA DESIGN SYSTEM - ANIMATIONS
// VERSÃO: Minimalista e Sutil
// ========================================

@use 'variables' as *;

// Keyframes - Animações sutis e elegantes
// ========================================

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.95);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes gentleFloat {
  0%, 100% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-5px);
  }
}

// Animation Classes - Uso prático
// ========================================

.animate-fade-in {
  animation: fadeIn 0.6s $ease-out;
}

.animate-fade-in-up {
  animation: fadeInUp 0.8s $ease-out;
}

.animate-slide-in-left {
  animation: slideInLeft 0.6s $ease-out;
}

.animate-slide-in-right {
  animation: slideInRight 0.6s $ease-out;
}

.animate-scale-in {
  animation: scaleIn 0.4s $ease-out;
}

.animate-float {
  animation: gentleFloat 3s $ease-in-out infinite;
}

// Stagger animations - Para sequências
.stagger-children {
  > * {
    animation: fadeInUp 0.8s $ease-out;
  }
  
  > *:nth-child(1) { animation-delay: 0.1s; }
  > *:nth-child(2) { animation-delay: 0.2s; }
  > *:nth-child(3) { animation-delay: 0.3s; }
  > *:nth-child(4) { animation-delay: 0.4s; }
  > *:nth-child(5) { animation-delay: 0.5s; }
  > *:nth-child(6) { animation-delay: 0.6s; }
}

// Hover Effects - Interações elegantes
// ========================================

.hover-lift {
  transition: transform $transition-base, box-shadow $transition-base;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: $shadow-lg;
  }
}

.hover-glow {
  transition: box-shadow $transition-base;
  
  &:hover {
    box-shadow: 0 0 20px rgba($primary-500, 0.3);
  }
}

.hover-scale {
  transition: transform $transition-base;
  
  &:hover {
    transform: scale(1.02);
  }
}

.hover-fade {
  transition: opacity $transition-base;
  
  &:hover {
    opacity: 0.8;
  }
}

// Focus Effects
// ========================================

.focus-ring {
  &:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba($primary-500, 0.1);
  }
}

// Loading Animations
// ========================================

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

.animate-spin {
  animation: spin 1s linear infinite;
}

.animate-pulse {
  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

// Utility classes for controlling animation
// ========================================

.animate-none {
  animation: none !important;
}

.animate-delay-100 {
  animation-delay: 100ms;
}

.animate-delay-200 {
  animation-delay: 200ms;
}

.animate-delay-300 {
  animation-delay: 300ms;
}

.animate-delay-500 {
  animation-delay: 500ms;
}

// Reduced motion support
// ========================================

@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
  
  .animate-float {
    animation: none;
  }
  
  .stagger-children > * {
    animation: none;
  }
}

// Intersection Observer animations
// ========================================

.fade-in-observer {
  opacity: 0;
  transform: translateY(20px);
  transition: opacity 0.6s $ease-out, transform 0.6s $ease-out;
  
  &.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
}

.slide-in-observer {
  opacity: 0;
  transform: translateX(-30px);
  transition: opacity 0.8s $ease-out, transform 0.8s $ease-out;
  
  &.is-visible {
    opacity: 1;
    transform: translateX(0);
  }
}

.scale-in-observer {
  opacity: 0;
  transform: scale(0.9);
  transition: opacity 0.5s $ease-out, transform 0.5s $ease-out;
  
  &.is-visible {
    opacity: 1;
    transform: scale(1);
  }
}

import { PrismaClient } from '@prisma/client';
import * as bcrypt from 'bcrypt';

const prisma = new PrismaClient();

async function testAuthOperations() {
  try {
    console.log('üîê Testando opera√ß√µes de autentica√ß√£o...');

    // Criar um usu√°rio de teste para login
    const testUser = await prisma.user.upsert({
      where: { email: 'test@mesquitacakes.com' },
      update: {},
      create: {
        email: 'test@mesquitacakes.com',
        name: 'Usu√°rio Teste',
        password: await bcrypt.hash('123456', 10),
        role: 'CUSTOMER',
      },
    });

    console.log('‚úÖ Usu√°rio de teste criado/atualizado:', testUser.email);

    // Verificar hash de senha
    const isValidPassword = await bcrypt.compare('123456', testUser.password);
    console.log('‚úÖ Valida√ß√£o de senha:', isValidPassword ? 'OK' : 'FALHOU');

    // Buscar usu√°rios por role
    const admins = await prisma.user.findMany({
      where: { role: 'ADMIN' },
      select: { id: true, email: true, name: true, role: true },
    });

    const customers = await prisma.user.findMany({
      where: { role: 'CUSTOMER' },
      select: { id: true, email: true, name: true, role: true },
    });

    console.log(`‚úÖ Administradores: ${admins.length}`);
    console.log(`‚úÖ Clientes: ${customers.length}`);

    console.log('üéâ Teste de autentica√ß√£o conclu√≠do com sucesso!');
  } catch (error) {
    console.error('‚ùå Erro no teste de autentica√ß√£o:', error);
  } finally {
    await prisma.$disconnect();
  }
}

void testAuthOperations();
